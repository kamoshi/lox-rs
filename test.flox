let fib = fn n -> {
  if n == 0 {
    return 0
  };

  let current = 1;
  let previous = 0;

  let i = 0;
  while i < n - 1 {
    let next = current + previous;
    previous = current;
    current = next;
    i = i + 1;
  };

  current
};

print $ fib 10;

let Option = data Option
  | None
  | Some some;

let b = match Option.Some 33
  | Option.None -> "this is none"
  | { Option.Some } val -> val;

let Tuple3 = data Tuple3
  | Tuple3 a b c;

print b;

let xd = Tuple3.Tuple3 1 "abc" false;

match xd
  | { Tuple3.Tuple3 } a b c -> if {c} a else b;

let Test = data Option
  | None
  | Some some;

match Test.None
  | Option.None -> "none"
  | Option.Some -> "some"
  | Test.None   -> "xd"
